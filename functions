echo "Bash Functions"

man() {
	# Set colors for less.
	env \
	LESS_TERMCAP_mb=$(tput blink; tput setaf 1) \	# begin blink
	LESS_TERMCAP_md=$(tput bold; tput setaf 1) \ 	# begin bold
	LESS_TERMCAP_me=$(tput sgr0) \               	# reset bold/blink
	LESS_TERMCAP_so=$(tput smso) \              	# begin reverse video
	LESS_TERMCAP_se=$(tput rmso) \              	# reset reverse video
	LESS_TERMCAP_us=$(tput smul; tput setaf 2) \ 	# begin underline
 	LESS_TERMCAP_ue=$(tput rmul; tput sgr0) \    	# reset underline
 		man "$@"
}




function  update {
	sudo /usr/sbin/softwareupdate -i -a
	
	# Homebrew
	BIN=$(which brew)
	if [ -x ${BIN} ]; then
		${BIN} update && ( ${BIN} upgrade; ${BIN} cask upgrade )
		${BIN} doctor
		${BIN} cleanup
	fi
	# MacPorts
	BIN=$(which port)
	if [ -x  ${BIN} ]; then
		sudo ${BIN} selfupdate 
		sudo ${BIN} upgrade outdated
	fi
	# Fink Binary
	BIN=$(which apt-get)
	if [ -x  ${BIN} ]; then
		${BIN} update && ${BIN} upgrade 
	fi

	# Fink Source
	BIN=$(which fink)
	if [ -x  ${BIN} ]; then
		${BIN} selfupdate
		${BIN} upgrade outdated
	fi

	# Node Package Manger
	BIN=$(which npm)
	if [ -x ${BIN} ]; then
		${BIN} install npm -g 
		${BIN} update -g
	fi
	# RubyGems
    	BIN=$(which gem)
	if [ -x ${BIN} ]; then
		${BIN} update --system 
		${BIN} update
		${BIN} cleanup
	fi
	
	# Python
	for BIN in $(which pip3 pip2); do
		if [ -x ${BIN} ]; then
			${BIN} install --upgrade pip
			#LIST=$(${BIN} list --outdated --not-required | ${AWK} '{print $1}')
			#for pkg in LIST do
			#   ${BIN} install --upgrade pkg
			#done
		fi
	done
	# Nix Multi-User
	#sudo -i sh -c 'nix-channel --update &&
	#    nix-env -iA nixpkgs.nix &&
	#    launchctl remove org.nixos.nix-daemon &&
	#    launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist'
	#nix-env -u;
	
	# Nix Single User
	#nix-channel --update; nix-env -iA nixpkgs.nix; nix-env -u;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Create a new directory and enter it
#function mkd() {
#	mkdir -p "$@" && cd "$_";
#}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Function to quickly create an application icon from 1024px master file.
#function mkicns() {
#    if [[ -z "$@" ]]; then
#        echo "Input file missing"
#    else
#        filename=${1%.*}
#        mkdir $filename.iconset
#        sips -z 16 16   $1 --out $filename.iconset/icon_16x16.png
#        sips -z 32 32   $1 --out $filename.iconset/icon_16x16@2x.png
#        sips -z 32 32   $1 --out $filename.iconset/icon_32x32.png
#        sips -z 64 64   $1 --out $filename.iconset/icon_32x32@2x.png
#        sips -z 128 128 $1 --out $filename.iconset/icon_128x128.png
#        sips -z 256 256 $1 --out $filename.iconset/icon_128x128@2x.png
#        sips -z 256 256 $1 --out $filename.iconset/icon_256x256.png
#        sips -z 512 512 $1 --out $filename.iconset/icon_256x256@2x.png
#        sips -z 512 512 $1 --out $filename.iconset/icon_512x512.png
#        cp $1 $filename.iconset/icon_512x512@2x.png
#        iconutil -c icns $filename.iconset
#        rm -r $filename.iconset
#    fi
#}

# This function will use AppleScript to present a password entry dialog to make your scripts a little more user friendly.
#function gui_password {
#    if [[ -z $1 ]]; then
#        gui_prompt="Password:"
#    else
#        gui_prompt="$1"
#    fi
#    PW=$(osascript <<EOF
#    tell application "System Events"
#        activate
#        text returned of (display dialog "${gui_prompt}" default answer "" with hidden answer)
#    end tell
#EOF
#    )
#
#    echo -n "${PW}"
#}

# Get Path of Frontmost Finder Window
#function finder_path {
#    osascript -e 'tell application "Finder"'\
#        -e "if (${1-1} <= (count Finder windows)) then"\
#        -e "get POSIX path of (target of window ${1-1} as alias)"\
#        -e 'else' \
#        -e 'get POSIX path of (desktop as alias)'\
#        -e 'end if' \
#        -e 'end tell';
#}

# Print Files Selected in Finder
#selected() {
#    osascript <<EOT
#        tell application "Finder"
#            set theFiles to selection
#            set theList to ""
#            repeat with aFile in theFiles
#                set theList to theList & POSIX path of (aFile as alias) & "\n"
#            end repeat
#            theList
#        end tell
#EOT
#}

# Set Current Directory's Finder View to Column View
#function column_view {
#    osascript -e 'set cwd to do shell script "pwd"'\
#      -e 'tell application "Finder"'\
#      -e "if (${1-1} <= (count Finder windows)) then"\
#      -e "set the target of window ${1-1} to (POSIX file cwd) as string"\
#      -e "set the current view of the front Finder window to column view"\
#      -e 'else' -e "open (POSIX file cwd) as string"\
#      -e "set the current view of the front Finder window to column view"\
#      -e 'end if' -e 'end tell';
#}

# Set Current Directory's Finder View to Icon View
#function icon_view {
#    osascript -e 'set cwd to do shell script "pwd"'\
#      -e 'tell application "Finder"'\
#      -e "if (${1-1} <= (count Finder windows)) then"\
#      -e "set the target of window ${1-1} to (POSIX file cwd) as string"\
#      -e "set the current view of the front Finder window to icon view"\
#      -e 'else' -e "open (POSIX file cwd) as string"\
#      -e "set the current view of the front Finder window to icon view"\
#      -e 'end if' -e 'end tell';
#};

# Set Current Directory's Finder View to List View
#function list_view {
#  osascript -e 'set cwd to do shell script "pwd"'\
#    -e 'tell application "Finder"'\
#    -e "if (${1-1} <= (count Finder windows)) then"\
#    -e "set the target of window ${1-1} to (POSIX file cwd) as string"\
#    -e "set the current view of the front Finder window to list view"\
#    -e 'else' -e "open (POSIX file cwd) as string"\
#    -e "set the current view of the front Finder window to list view"\
#    -e 'end if' -e 'end tell';\
#}


# Cleans py[cod] and __pychache__ dirs in the current tree:
#pyclean () {
#  find . | grep -E "(__pycache__|\.py[cod]$)" | xargs rm -rf
#}


#git-dowloadfolder () {
#  url="$1"
#  svn checkout ${url/tree\/master/trunk}
#}


# pipenv shell breaks sometimes. This does not.
#pipenv-shell () {
#  source "$(pipenv --venv)/bin/activate"
#}


# See https://transfer.sh/
#transfer () {
#  if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
#tmpfile=$( mktemp -t transferXXX )
#if tty -s; then 
#	basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
#	curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
#	else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile 
#fi
#cat $tmpfile
#rm -f $tmpfile;
#}


# cd into whatever is the forefront Finder window.
#cdf () {
#  local path=$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')
#  echo "$path"
#  cd "$path"
#}


#findEmptyDirsAndFiles(){
#  find . -type f -exec bash -c 'if [ `cat "{}" |wc -w` -eq 0 ]; then echo "file - {}";fi' \; -or -empty -exec bash -c "echo dir - {}" \;
#}


#convertAllMDFilesToTabs(){
# find . -name '*.md' ! -type d -exec bash -c 'expand -t 4 "$0" > /tmp/e && mv /tmp/e "$0"' {} \;
#}

# ram <process-name> - Find how much RAM a process is taking.
#ram() {
#  local sum
#  local items
#  local app="$1"
#  if [ -z "$app" ]; then
#    echo "First argument - pattern to grep from processes"
#  else
#    sum=0
#    for i in `ps aux | grep -i "$app" | grep -v "grep" | awk '{print $6}'`; do
#      sum=$(($i + $sum))
#    done
#    sum=$(echo "scale=2; $sum / 1024.0" | bc)
#    if [[ $sum != "0" ]]; then
#      echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM."
#    else
#      echo "There are no processes with pattern '${fg[blue]}${app}${reset_color}' are running."
#    fi
#  fi
#}

echo "End Bash Functions"
